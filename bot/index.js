import { Telegraf, Markup } from "telegraf";
import schedule from "node-schedule";
import dotenv from "dotenv";
import db from "../backend/db.js";

import UserModel from "../backend/models/UserModel.js";
import PaymentModel from "../backend/models/PaymentModel.js";
import LessonModel from "../backend/models/LessonModel.js";

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

function delMessage(ctx, messageId) {
    const startTime = new Date(Date.now() + 2 * 60 * 60 * 1000);
    const endTime = new Date(startTime.getTime() + 1000);

    schedule.scheduleJob(
        { start: startTime, end: endTime, rule: "*/1 * * * * *" },
        async () => {
            await ctx.deleteMessage(messageId);
        }
    );
}

async function errorMessage(ctx, error) {
    console.log(error);
    await ctx.reply(
        "–≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑. –Ω–µ –≤–∏—Ö–æ–¥–∏—Ç—å - –∑–Ω–∞—á–∏—Ç—å –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –ø—Ä–∞—Ü—é—î –Ω–∞–¥ —è–∫–Ω–∞–π—à–≤–∏–¥—à–∏–º —Ä–æ–∑–≤ º—è–∑–∞–Ω–Ω—è–º –ø—Ä–æ–±–ª–µ–º–∏"
    );
}

async function sendNotification() {
    try {
        const users = await UserModel.find({});

        for (const user of users) {
            if (user.telegram) {
                const messages = [
                    "–ö–æ–∂–Ω–æ–≥–æ –¥–Ω—è —Ç–∏ –º–∞—î—à 1140 —Ö–≤–∏–ª–∏–Ω –∂–∏—Ç—Ç—è‚è∞\n" +
                    "–¢–æ–º—É –∑–Ω–∞–π–¥–∏ 40 —Ö–≤–∏–ª–∏–Ω —ñ –ø—Ä–∏–¥—ñ–ª–∏ —ó—Ö —Å–≤–æ—î–º—É –∑–¥–æ—Ä–æ–≤‚Äò—é —Ä–∞–∑–æ–º –∑ YOGA ‚ñ≤ HATA",

                    "–¢–∏ –º–∞—î—à —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ —Å–≤–æ—î —Ç—ñ–ª–æ, —â–æ–± –≤–æ–Ω–æ –Ω–µ –∑–∞–≤–∞–∂–∞–ª–æ —Ç–æ–±—ñ —Ä–µ–∞–ª—ñ–∑–æ–≤—É–≤–∞—Ç–∏ –ø–ª–∞–Ω–∏ –¥—É—à—ñü™¨ YOGA ‚ñ≤ HATA",

                    "–í —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ! –ù–∞–π—Ç—è–∂—á–µ –∑—Ä–æ–±–∏—Ç–∏ –ª–∏—à–µ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫, –∞ –¥–∞–ª—ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –Ω–æ–≤–∏–π, —á—É–¥–æ–≤–∏–π —à–ª—è—Ö. YOGA ‚ñ≤ HATA üôèüèª",

                    "–ü—Ä–∞–∫—Ç–∏–∫–∏ –ô–æ–≥–∏ —Ä–æ–±–ª—è—Ç—å —Ç–≤–æ—î —Ç—ñ–ª–æ –º–æ–ª–æ–¥–∏–º —Ç–∞ –∑–¥–æ—Ä–æ–≤–∏–º —ñ –ø–æ–∫—Ä–∞—â—É—é—Ç—å –ø–∞–º‚Äò—è—Ç—å —Ç–∞ —Ä–æ–±–æ—Ç—É –º–æ–∑–∫—É. YOGA ‚ñ≤ HATAüßòüèª‚Äç‚ôÇÔ∏è",

                    "–ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É –Ω–∞ —Å–≤–æ—î –¥–∏—Ö–∞–Ω–Ω—è. –ü—Ä—è–º–æ –∑–∞—Ä–∞–∑ –ó—É–ø–∏–Ω–∏—Å—å, —ñ –≤—ñ–¥—á—É–π –∂–∏—Ç—Ç—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Å–µ–±–µü´Å\n" +
                    "–í—ñ–¥—á—É–π —è–∫ —Ç–∏ –¥–∏—Ö–∞—î—à\n" +
                    "YOGA ‚ñ≤ HATA",

                    "–í—Å—ñ –ø—Ä–æ–±–ª–µ–º–∏ –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤ –≥–æ–ª–æ–≤—ñ - –≤–æ–Ω–∏ —É —Ç—ñ–ª—ñ\n" +
                    "–£ –∫–æ–∂–Ω—ñ–π –∑ 30 —Ç—Ä–∏–ª—ñ–∞—Ä–¥—ñ–≤ –∫–ª—ñ—Ç–∏–Ω —è–∫—ñ —î –≤ —Ç–æ–±—ñ\n" +
                    "–ñ–µ–Ω–∏ –≥–µ—Ç—å —Å—Ç—Ä–µ—Å —ñ –∞–ø–∞—Ç—ñ—é —ñ –ø—Ä–∞–∫—Ç–∏–∫—É–π –∑ YOGA ‚ñ≤ HATA üí™üèª",

                    "–ú–µ–Ω—Ç–∞–ª—å–Ω–µ –∑–¥–æ—Ä–æ–≤‚Äò—è —Ç–∞–∫ —Å–∞–º–æ –≤–∞–∂–ª–∏–≤–µ —è–∫ —ñ —Ñ—ñ–∑–∏—á–Ω–µ. –ü—Ä–∞—Ü—é—î—à –Ω–∞–¥ —Ç—ñ–ª–æ–º - –ø–æ–∫—Ä–∞—â—É—î—à —Ä–æ–±–æ—Ç—É –º–æ–∑–∫—Éüß†\n" +
                    "YOGA ‚ñ≤ HATA",

                    "–°—Ç—Ä–∞—Ö, —Å—Ç—Ä–µ—Å —ñ –∞–ø–∞—Ç—ñ—è. –ù–µ –¥–∞–≤–∞–π —Ü–∏–º —Å–ª–æ–≤–∞–º –∑–∞–≤–∞–∂–∞—Ç–∏ —Ç–æ–±—ñ –∂–∏—Ç–∏. –ü—Ä–∞–∫—Ç–∏–∫—É–π —ñ –ø–æ–∑–±—É–≤–∞–π—Å—è –Ω–µ–≥–∞—Ç–∏–≤—É –∑—ñ —Å–≤–æ–≥–æ –∂–∏—Ç—Ç—èüòá\n" +
                    "YOGA ‚ñ≤ HATA",

                    "–°—Ç—Ä–∞—Ö, —Å—Ç—Ä–µ—Å —ñ –∞–ø–∞—Ç—ñ—è. –ù–µ –¥–∞–≤–∞–π —Ü–∏–º —Å–ª–æ–≤–∞–º –∑–∞–≤–∞–∂–∞—Ç–∏ —Ç–æ–±—ñ –∂–∏—Ç–∏. –ü—Ä–∞–∫—Ç–∏–∫—É–π —ñ –ø–æ–∑–±—É–≤–∞–π—Å—è –Ω–µ–≥–∞—Ç–∏–≤—É –∑—ñ —Å–≤–æ–≥–æ –∂–∏—Ç—Ç—èüòá\n" +
                    "YOGA ‚ñ≤ HATA",

                    "–ó–∞–ª–∏—à—Ç–µ —É —Å–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ —Ç—ñ–ª—å–∫–∏ —Ç–µ —â–æ –Ω–∞–¥–∏—Ö–∞—î –í–∞—Å —ñ –Ω–∞–ø–æ–≤–Ω—é—î –ï–Ω–µ—Ä–≥—ñ—î—é‚ö°Ô∏è\n" +
                    "–ó —É—Å—ñ–º —ñ–Ω—à–∏–º - –ø—Ä–æ—â–∞–π—Ç–µ—Å—å –±–µ–∑ –∂–∞–ª—é\n" +
                    "YOGA ‚ñ≤ HATA",

                    "–ó–Ω–∞—Ö–æ–¥—å —Å–≤—ñ—Ç–ª–æ —É —Å–æ–±—ñ —Ç–∞ –ª–æ–≤–∏ —Å–≤—ñ–π –†–ò–¢–ú- –Ω–∞–≤—ñ—Ç—å –ø—ñ–¥ —á–∞—Å –ª—é—Ç–æ—ó –ø—ñ—Ç—å–º–∏ü§ç\n" +
                    "YOGA ‚ñ≤ HATA",

                    "–¶—ñ–Ω—É–π –∫–æ–∂–µ–Ω —Å–≤—ñ–π –¥–µ–Ω—å, —Ü—ñ–Ω—É–π –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É —Å–≤–æ–≥–æ –∂–∏—Ç—Ç—è - —ñ —Ç–∏ –±—É–¥–µ—à —â–∞—Å–ª–∏–≤–∏–πüòä\n" +
                    "–ü—Ä–∞–∫—Ç–∏–∫—É–π –º–µ–¥–∏—Ç–∞—Ü—ñ—é —Ç–∞ –π–æ–≥—É - —Å—Ç–∞–≤–∞–π —Å–≤—ñ–¥–æ–º–∏–º —Ç–∞ –∑–¥–æ—Ä–æ–≤–∏–º \n" +
                    "YOGA ‚ñ≤ HATA",

                    "–¢–≤–æ—ó –º—Ä—ñ—ó –≤–∞–∂–ª–∏–≤—ñ - –ú–†–Ü–ô\n" +
                    "–†—É—Ö–∞–π—Å—è –≤–ø–µ—Ä–µ–¥, –¥—ñ–π, –¥–æ—Å—è–≥–∞–π, –∑–¥—ñ–π—Å–Ω—é–π‚ö°Ô∏è\n" +
                    "–ù–µ —Å–ª—É—Ö–∞–π —Ç–∏—Ö —Ö—Ç–æ –∫–∞–∂–µ –Ω–µ–≥–∞—Ç–∏–≤ –ø—Ä–æ —Ç–µ–±–µ\n" +
                    "–ü—Ä–∞–∫—Ç–∏–∫—É–π —â–æ–± —Å—Ç–∞—Ç–∏ —Å–∏–ª—å–Ω–∏–º —Ç–∞ –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–º —Ä–∞–∑–æ–º –∑ YOGA ‚ñ≤ HATA üôèüèª\n",

                    "–ú–∏ –ø—Ä–∞–≥–Ω–µ–º–æ –õ—é–±–æ–≤—ñ, –®—É–∫–∞—î–º–æ –ß–∞—Å—É —ñ –±–æ—ó–º–æ—Å—è –°–º–µ—Ä—Ç—ñü•∫\n" +
                    "–ë—É–¥—å —Å–∏–ª—å–Ω–∏–º —ñ –Ω–µ–∑–ª–∞–º–Ω–∏–º —Ä–∞–∑–æ–º –∑ \n" +
                    "YOGA ‚ñ≤ HATA. \n" +
                    "–ù–µ –±—ñ–π—Å—è –Ω—ñ—á–æ–≥–æüòé",

                    "–Ü–¥–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–µ —ñ—Å–Ω—É—î - —Ç–∏ —Ç–∞–∫–∏–π —è–∫–∏–π —îü§ç\n" +
                    "–Ü –≤ —Ü—å–æ–º—É —Ç–≤–æ—è —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å\n" +
                    "YOGA ‚ñ≤ HATA —Ç–≤—ñ–π –ë–æ—Ç-–ü—Ä–æ–≤—ñ–¥–Ω–∏–∫üôèüèª",

                    "–î–æ–∑–≤–æ–ª—å —Å–æ–±—ñ –ø–∞–¥–∞—Ç–∏üôèüèª\n" +
                    "–î–æ–∑–≤–æ–ª—å —Å–æ–±—ñ –¥–æ–ø—É—Å–∫–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏\n" +
                    "–ù–µ –±—ñ–π—Å—è –∑–¥–∞–≤–∞—Ç–∏—Å—è\n" +
                    "–í—Å–µ —â–æ –∑–∞—Ä–∞–∑ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è - —Ü–µ —à–ª—è—Öüòä\n" +
                    "–ë–µ–∑ –ø–æ—Ä–∞–∑–æ–∫ - –Ω–µ–º–∞—î —É—Å–ø—ñ—Ö—É. YOGA ‚ñ≤ HATA",

                    "–ù–µ –≤–∞—Ä—Ç–æ –∑–∞—Ü–∏–∫–ª—é–≤–∞—Ç–∏—Å—è –Ω–∞ —Ç–æ–º—É —á–æ–≥–æ –≤–∞–º –±—Ä–∞–∫—É—î - –Ω–µ –∑–∞–±—É–≤–∞–π—Ç–µ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏—Å—è —Ç–∏–º —â–æ –º–∞—î—Ç–µ. \n" +
                    "YOGA ‚ñ≤ HATA",

                    "–ì–æ–¥—ñ —Ö–≤–∏–ª—é–≤–∞—Ç–∏—Å—è –∑–∞ —Ç–µ —â–æ –í–ò –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç–µüôèüèª\n" +
                    "–†–æ–∑—Å–ª–∞–±—Ç–µ—Å—å. –ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–∏—Ö–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–∂—É—Ç—å –≤ —Ü—å–æ–º—É. YOGA ‚ñ≤ HATA",

                    "–¶–µ —Ç–µ–∂ –º–∏–Ω–µüòä\n" +
                    "–¢–æ–±—ñ –ø–æ–≥–∞–Ω–æ, —Ä–æ–∑–ª—é—Ç–∏–≤—Å—è, –∑–ª–∏—à—Å—è, –Ω–µ –∑–Ω–∞—î—à —â–æ —Ä–æ–±–∏—Ç–∏. –ü—Ä–∞–∫—Ç–∏–∫—É–π. –Ü —Ç–∏ –≤—ñ–¥—á—É—î—à –∫–∞–π—Ñ —Ç–∞ –µ–Ω–µ—Ä–≥—ñ—é –¥–ª—è –∂–∏—Ç—Ç—è —Ç–∞ –¥—ñ–π‚ö°Ô∏è\n" +
                    "YOGA ‚ñ≤ HATA"
                ]
                const randomMessage = Math.floor(Math.random() * messages.length)

                await bot.telegram.sendMessage(user.telegram, messages[randomMessage]);
            }
        }
    } catch (error) {
        console.error("Error sending notification:", error);
    }
}

schedule.scheduleJob("0 18 */2 * *", async () => {
    await sendNotification();
});

bot.use(async (ctx, next) => {
    const message = ctx.message ?? ctx.update.callback_query?.message
    console.log(message)

    const user = await UserModel.findOne({telegram: message.chat.id ?? ""})

    if (user) {
        return next()
    }

    if (ctx.message.text.startsWith("/start")) {
        const key = message.text.split(" ")[1]

        const payment = await PaymentModel.findOneAndUpdate({key: key}, {$set: {key: ""}})

        if (payment?.payed) {
            await UserModel.findOneAndUpdate({_id: payment.user}, {$set: {telegram: message.chat.id}})
            return next()
        }
    }

    await ctx.reply("—É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏. –ø—Ä–∏–¥–±–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –Ω–∞ —Å–∞–π—Ç—ñ",
        Markup.inlineKeyboard([
            [Markup.button.url("–ü–ï–†–ï–ô–¢–ò", process.env.BASE_URL)],
        ])
    );
});

bot.start(async (ctx) => {
    try {
        await ctx.reply("–†–æ–∑–∫—Ä–∏–π —Å–≤—ñ–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª —Ç–∞ —Å–∏–ª—É —á–µ—Ä–µ–∑ –π–æ–≥—É\n\n–ù–µ—Å—Ç–∞—á–∞ –µ–Ω–µ—Ä–≥—ñ—ó, –Ω–µ–∫–µ—Ä–æ–≤–∞–Ω—ñ –µ–º–æ—Ü—ñ—ó, —Å—Ç—Ä–∞—Ö, —Ç—Ä–∏–≤–æ–≥–∞ —Ç–∞ –∞–ø–∞—Ç—ñ—è, –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∂–∏—Ç—Ç—î–≤–æ—ó —Å–∏–ª–∏‚Ä¶\n\n–ö–æ–∂–µ–Ω –≤ —Å–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ –ø–æ—Ç—Ä–∞–ø–ª—è—î –Ω–∞ —Ü–µ–π —à–ª—è—Ö.\n\n–©–æ–± –ª–µ–≥—à–µ –ø—Ä–æ–∂–∏–≤–∞—Ç–∏ —Ç–∞–∫—ñ –ø–µ—Ä—ñ–æ–¥–∏ —Ç–∞ –≤–∏—Ö–æ–¥–∏—Ç–∏ –Ω–∞ –Ω–æ–≤—ñ —Ä–∏—Ç–º–∏ –∂–∏—Ç—Ç—è, –º–∏ –¥—ñ–ª–∏–º–æ—Å—è –∑ —Ç–æ–±–æ—é –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ –π–æ–≥–∏, –º–µ–¥–∏—Ç–∞—Ü—ñ—è–º–∏ —Ç–∞ –¥–∏—Ö–∞–ª—å–Ω–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏, —è–∫—ñ –≤–∏—Ä—ñ–≤–Ω—è—é—Ç—å –±–∞–ª–∞–Ω—Å –≤ —Ç–≤–æ—î–º—É –æ—Ä–≥–∞–Ω—ñ–∑–º—ñ —Ç–∞ –ø—ñ–¥–≤–∏—â–∞—Ç—å –∂–∏—Ç—Ç—î–≤—É –µ–Ω–µ—Ä–≥—ñ—é. –°–µ–∫—Ä–µ—Ç–∏ —â–∞—Å—Ç—è —ñ —É—Å–ø—ñ—Ö—É —Ç–µ–ø–µ—Ä —Å—Ç–∞–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–±—ñ!",
            Markup.keyboard([
                ["–π–æ–≥–∞ FYSM"],
                ["–¥–∏—Ö–∞–ª—å–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏"],
                ["–ø—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü—ñ—ó"],
                ["—á–∞—Ç –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤", "—Å–ª—É–∂–±–∞ —Ç—É—Ä–±–æ—Ç–∏"],
            ]).resize()
        );

    } catch (error) {
        await errorMessage(ctx, error)
    }
});

bot.hears(
    new RegExp(
        ["–π–æ–≥–∞ FYSM", "–¥–∏—Ö–∞–ª—å–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏", "–ø—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü—ñ—ó"].join("|"),
        "gi"
    ),
    async (ctx) => {
        try {
            const format = {
                "–π–æ–≥–∞ FYSM": ["yoga", ["1", "2"]],
                "–¥–∏—Ö–∞–ª—å–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏": ["breath", ["1", "1"]],
                "–ø—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü—ñ—ó": ["meditation", ["1", "1"]],
            };

            await ctx.reply(
                "–æ—Ü—ñ–Ω–∏ —Å–≤—ñ–π —Å—Ç–∞–Ω (–≤—ñ–¥ 1 –¥–æ 10)",
                Markup.inlineKeyboard([
                    [
                        Markup.button.callback(
                            "1",
                            `lesson_${format[ctx.message.text][0]}_${
                                format[ctx.message.text][1][0]
                            }`
                        ),
                        Markup.button.callback(
                            "2",
                            `lesson_${format[ctx.message.text][0]}_${
                                format[ctx.message.text][1][0]
                            }`
                        ),
                        Markup.button.callback(
                            "3",
                            `lesson_${format[ctx.message.text][0]}_${
                                format[ctx.message.text][1][0]
                            }`
                        ),
                    ],
                    [
                        Markup.button.callback(
                            "4",
                            `lesson_${format[ctx.message.text][0]}_${
                                format[ctx.message.text][1][0]
                            }`
                        ),
                        Markup.button.callback(
                            "5",
                            `lesson_${format[ctx.message.text][0]}_${
                                format[ctx.message.text][1][0]
                            }`
                        ),
                        Markup.button.callback(
                            "6",
                            `lesson_${format[ctx.message.text][0]}_${
                                format[ctx.message.text][1][1]
                            }`
                        ),
                    ],
                    [
                        Markup.button.callback(
                            "7",
                            `lesson_${format[ctx.message.text][0]}_${
                                format[ctx.message.text][1][1]
                            }`
                        ),
                        Markup.button.callback(
                            "8",
                            `lesson_${format[ctx.message.text][0]}_${
                                format[ctx.message.text][1][1]
                            }`
                        ),
                        Markup.button.callback(
                            "9",
                            `lesson_${format[ctx.message.text][0]}_${
                                format[ctx.message.text][1][1]
                            }`
                        ),
                    ],
                    [
                        Markup.button.callback(
                            "10",
                            `lesson_${format[ctx.message.text][0]}_${
                                format[ctx.message.text][1][1]
                            }`
                        ),
                    ],
                ])
            );
        } catch (error) {
            await errorMessage(ctx, error)
        }
    }
);

bot.hears("—á–∞—Ç –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤", async (ctx) => {
    try {
        await ctx.reply(
            "—Ç–≤–æ—è —Å–ø—ñ–ª—å–Ω–æ—Ç–∞ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤. –ø—Ä–∏—î–¥–Ω—É–π—Å—è!",
            Markup.inlineKeyboard([
                [Markup.button.url("–ü–†–ò–Ñ–î–ù–ê–¢–ò–°–Ø", process.env.TELEGRAM_CHAT_LINK)],
            ])
        );

    } catch (error) {
        await errorMessage(ctx, error)
    }
});

bot.hears("—Å–ª—É–∂–±–∞ —Ç—É—Ä–±–æ—Ç–∏", async (ctx) => {
    try {
        await ctx.reply(
            "—Ç–≤–æ—è —Å–ª—É–∂–±–∞ —Ç—É—Ä–±–æ—Ç–∏, —â–æ –≥–æ—Ç–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏!",
            Markup.inlineKeyboard([
                [Markup.button.url("–ù–ê–ü–ò–°–ê–¢–ò", process.env.TELEGRAM_SUPPORT_LINK)],
            ])
        );

    } catch (error) {
        await errorMessage(ctx, error)
    }
});

bot.action(/^lesson_(.+)/, async (ctx) => {
    try {
        const data = ctx.match[1].split("_");

        const user = await UserModel.findOne({telegram: ctx.update.callback_query.message.chat.id})

        if (data[0] !== "meditation") {
            const lastContent = new Date(user.lastContent[data[0]].datetime);

            if (user.lastContent[data[0]].count >= 2) {
                const nextDay = new Date(lastContent);
                nextDay.setDate(lastContent.getDate() + 1);
                nextDay.setHours(0, 0, 0, 0);

                if (new Date().getTime() > nextDay.getTime()) {
                    user.lastContent[data[0]].count = 0;
                    await user.save();
                }

                return await ctx.answerCbQuery("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à–µ –¥–≤–æ—Ö –ø—Ä–∞–∫—Ç–∏–∫ –Ω–∞ –æ–¥–Ω—É –¥–æ–±—É");
            }

            lastContent.setHours(lastContent.getHours() + 2);

            if (lastContent > Date.now()) {
                return await ctx.answerCbQuery("–ú–∞—î –ø—Ä–æ–π—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 –≥–æ–¥–∏–Ω–∏ –º—ñ–∂ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º –ø—Ä–∞–∫—Ç–∏–∫")
            }
        }

        const lessons = await LessonModel.find({
            _id: { $ne: user.lastContent[data[0]].lesson?.toString() },
            category: data[0],
            mood: data[1],
            disable: false
        });

        if (!lessons.length) {
            return await ctx.answerCbQuery("–ü—Ä–∞–∫—Ç–∏–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        }

        await ctx.deleteMessage(ctx.update.callback_query.message.message_id)

        const randomLessonIndex = Math.floor(Math.random() * lessons.length);
        const randomLesson = lessons[randomLessonIndex];

        user.lastContent[data[0]].lesson = randomLesson._id;
        user.lastContent[data[0]].datetime = Date.now();
        user.lastContent[data[0]].count += 1;
        user.save();

        if (randomLesson.type === "media") {
            if (randomLesson.files.low) {
                await ctx.reply("–æ–±–µ—Ä—ñ—Ç—å —è–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ", Markup.inlineKeyboard([
                    [Markup.button.callback("HD", `quality_${randomLesson._id}_high`)],
                    [Markup.button.callback("–º–æ–±—ñ–ª—å–Ω–∞", `quality_${randomLesson._id}_low`)]
                ]))

            } else {
                const lessonMessage = await ctx.replyWithVideo(
                    randomLesson.files.high,
                    {
                        caption: `${randomLesson.caption}\n\n–±—ñ–ª—å—à–µ –ø—Ä–æ –π–æ–≥—É, —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–¥–æ—Ä–æ–≤–µ –≥–Ω—É—á–∫–µ —Ç—ñ–ª–æ –≤ —ñ–Ω—Å—Ç–∞–≥—Ä–∞–º—ñ –º–∞–π—Å—Ç—Ä–∞: <a href="${process.env.INSTAGRAM_LINK}">–°–µ—Ä–∂ –§–∞–π–Ω–∏–π</a>`,
                        protect_content: true,
                        parse_mode: "HTML",
                    }
                );

                delMessage(ctx, lessonMessage.message_id);
            }

        } else {
            const photoMassage = await ctx.replyWithPhoto(randomLesson.photo)
            const lessonMessage = await ctx.replyWithAudio(
                randomLesson.files.high,
                {
                    caption: `${randomLesson.caption}\n\n–±—ñ–ª—å—à–µ –ø—Ä–æ –π–æ–≥—É, —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–¥–æ—Ä–æ–≤–µ –≥–Ω—É—á–∫–µ —Ç—ñ–ª–æ –≤ —ñ–Ω—Å—Ç–∞–≥—Ä–∞–º—ñ –º–∞–π—Å—Ç—Ä–∞: <a href="${process.env.INSTAGRAM_LINK}">–°–µ—Ä–∂ –§–∞–π–Ω–∏–π</a>`,
                    protect_content: true,
                    parse_mode: "HTML",
                }
            )

            delMessage(ctx, photoMassage.message_id);
            delMessage(ctx, lessonMessage.message_id);
        }

    } catch (error) {
        await errorMessage(ctx, error)
    }
});

bot.action(/^quality_(.+)/, async (ctx) => {
    try {
        const data = ctx.match[1].split("_");

        await ctx.deleteMessage(ctx.update.callback_query.message.message_id)

        const lesson = await LessonModel.findOne({_id: data[0]})

        const lessonMessage = await ctx.replyWithVideo(
            lesson.files[data[1]],
            {
                caption: `${lesson.caption}\n\n–±—ñ–ª—å—à–µ –ø—Ä–æ –π–æ–≥—É, —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–¥–æ—Ä–æ–≤–µ –≥–Ω—É—á–∫–µ —Ç—ñ–ª–æ –≤ —ñ–Ω—Å—Ç–∞–≥—Ä–∞–º—ñ –º–∞–π—Å—Ç—Ä–∞: <a href="${process.env.INSTAGRAM_LINK}">–°–µ—Ä–∂ –§–∞–π–Ω–∏–π</a>`,
                protect_content: true,
                parse_mode: "HTML",
            }
        );

        delMessage(ctx, lessonMessage.message_id);

    } catch (error) {
        await errorMessage(ctx, error)
    }
})

bot.launch()
